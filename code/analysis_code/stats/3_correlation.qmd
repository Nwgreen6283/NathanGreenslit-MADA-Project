---
title: "cor"
format:
  html:
    theme: default
---

**This code creates a correlation matrix to look at relationships between variables. This helps identify specific relationships of interest**

[Link](http://www.sthda.com/english/wiki/correlation-matrix-a-quick-start-guide-to-analyze-format-and-visualize-a-correlation-matrix-using-r-software):

# Getting Started

#### Libraries

```{r}
library(tidyverse)
library(here)
library(Hmisc)#Cor Tables and Lag
library(corrplot) #Cor Plots
library(lubridate) #For dates
library(ggpubr) #Plot stacking
```

#### Data

```{r, include = FALSE}
dust0<- read_csv(here("data", "processed_data","dust_master.csv")) #Different Dust permutations
data0<- read_csv(here("data", "processed_data", "tx_master.csv")) #Master Data containing copies_mL and nutrients 
```

# Cleaning

### Trim data sets from 7/4 to 7/19

```{r}
dust<- dust0 %>%
  filter(!is.na(date),
         date %in% as.Date("2022-07-04"):as.Date("2022-07-19")) 


data<- data0 %>%
  filter(date %in% as.Date("2022-07-04"):as.Date("2022-07-19"))
```

### Combine into one big data set

```{r}
master0<- 
  dust %>% full_join(data) %>%
  filter(hr_cst %in% "01") %>% #While this is technically not for hour 1, this gets ride of all   duplicates for the sake of analysis.
  select(!c(hr_cst,...1,Type, t1,t7,t13,t19,tsum,tavg,SUM,dust,t7avg)) %>%
  rename("dust" = "t7sum") #Now dust variable is the t7sum
```

### Make Lag data sets by Site

This cleans out non-numeric values, creates site lag from CCA, and produces a final daily plot

```{r}
bo<- 
  master0 %>%
  filter(site %in% "Blind Oso"| date %in% c( as.Date("2022-07-05"), as.Date("2022-07-06"))) %>%
  select(!site) %>% 
  mutate(dust_lag =Lag(dust, shift  = 1)) %>% #Lag from cca.qmd
  filter(date %in% as.Date('2022-07-07') : as.Date('2022-07-19')) %>%
  select(!date)

c2<- 
  master0 %>%
  filter(site %in% "Canals"| date %in% c( as.Date("2022-07-05"), as.Date("2022-07-06"))) %>%
  select(!site) %>% 
  mutate(dust_lag =Lag(dust, shift  = 2)) %>%
  filter(date %in% as.Date('2022-07-07') : as.Date('2022-07-19')) %>%
  select(!date)

rd<- 
  master0 %>%
  filter(site %in% "Gulf"| date %in% c( as.Date("2022-07-05"), as.Date("2022-07-06"))) %>%
  select(!site) %>% 
  mutate(dust_lag =Lag(dust, shift  = 1)) %>%
  filter(date %in% as.Date('2022-07-07') : as.Date('2022-07-19')) %>%
  select(!date)

```

#### Make datasets for MADA analysis

```{r}
b1<- 
  bo %>%
  select(temp, sal, nn, orthop, don, doc, tdn, chl, copies_mL, dust, dust_lag)

c1<- 
  c2 %>%
  select(temp, sal, nn, orthop, don, doc, tdn, chl, copies_mL, dust, dust_lag)

r1<- 
  rd %>%
  select(temp, sal, nn, orthop, don, doc, tdn, chl, copies_mL, dust, dust_lag)
```

# Correlation Matrix

There are different methods for **correlation analysis** : **Pearson parametric correlation test**, **Spearman** and **Kendall** rank-based **correlation analysis**. The default is [pearson correlation coefficient](http://www.sthda.com/english/wiki/correlation-test-between-two-variables) which measures the linear **dependence** between two variables. [kendall and spearman](http://www.sthda.com/english/wiki/correlation-test-between-two-variables) correlation methods are non-parametric **rank-based correlation test**.

#### Compute Correlation Matrix

If your data contain missing values, use the following R code to handle missing values by case-wise deletion.

    cor(x, method = "pearson", use = "complete.obs")

```{r, include = FALSE}
b2<- cor(b1, method = "spearman") 
round(b1,2) #Round correlation coeff to "x" digits 

c2<- cor(c1, method = "spearman")
round(c1,2)

r2<- cor(r1, method = "spearman")
round(r1,2)
```

#### Visualize with `corrplot()` function

The function **corrplot()** takes the **correlation matrix** as the first argument. The second argument (type="upper") is used to display only the upper triangular of the **correlation matrix**.

```{r}
par(mfrow=c(1,3))

#Non-Parametric Data
 corrplot(b2, type = "upper", 
         tl.col = "black", tl.srt = 90,
         title = "Blind Oso",  mar=c(0,0,1,0)) #Adds and lowers title 

corrplot(c2, type = "upper", 
         tl.col = "black", tl.srt = 90,
         title = "Canals", mar=c(0,0,1,0))

corrplot(r2, type = "upper", 
         tl.col = "black", tl.srt = 90, mar=c(0,0,1,0))
         title(main = "Gulf" )
```

##### 

It's also possible to **combine correlogram with the significance test**. We'll use the result *res.cor2* generated in the previous section with **rcorr**() function \[in **Hmisc** package\]:

<!--# Get this to work -->

```{r}
# Insignificant correlation are crossed
#corrplot(bclean$r, type="upper", order="hclust", 
        # p.mat = bclean$P, sig.level = 0.05, insig = "blank")

#corrplot(cclean$r, type="upper", order="hclust", 
        # p.mat = cclean$P, sig.level = 0.05, insig = "blank")

#corrplot(rclean$r, type="upper", order="hclust", 
         #p.mat = rclean$P, sig.level = 0.05, insig = "blank")

```
