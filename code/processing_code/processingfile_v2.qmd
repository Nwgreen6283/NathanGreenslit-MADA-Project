---
title: "An example cleaning script with code pulled in"
author: "Andreas Handel"
date: "2023-01-03"
output: html_document
---


# Processing script with code pulled in

This is essentially the same as the other Quarto file, but now the code is not inside this file. Instead, it is pulled in from the R script using the code chunk labels.




# Setup

This needs to run to load the R script so we can include the code chunks below.

Note that you can pull in more than one R script if you want.

```{r, include=FALSE, cache=FALSE}
knitr::read_chunk('processingcode.R')
```




Load needed packages. Instead of having R commands here, this just pulls in the code from the R script we loaded above and labelled.


```{r, packages, message = FALSE, warning = FALSE}
```


# Data loading

Note that for functions that come from specific packages (instead of base R), I often specify both package and function like so:
package::function() that's not required one could just call the function specifying the package makes it clearer where the function "lives",
but it adds typing. You can do it either way.

```{r, loaddata}
```


# Explore data

Several ways of looking at the data

```{r, exploredata}
dplyr::glimpse(rawdata)
summary(rawdata)
head(rawdata)
skimr::skim(rawdata)
```

Looks like we have the following data:

* height (seems like it's in centimeters) 
* weight (seems to be in kilogram)
* Sex


# Cleaning

By inspecting the data as done above, we find some problems that need addressing:

First, there is an entry for height which says "sixty" instead of a number. 
Does that mean it should be a numeric 60? It somehow doesn't make sense since the weight is 60kg, which can't happen for a 60cm person (a baby).
Since we don't know how to fix this, we might decide to remove the person. This "sixty" entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn't very meaningful. So let's fix that first.

```{r, cleandata1}
```

Now we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don't know, we might need to remove this person, which we'll do here.

```{r, cleandata2}
```

Height values seem ok now.

Now let's look at the `Weight` variable. There is a person with weight of 7000, which is impossible, and one person with missing weight.
To be able to analyze the data, we'll remove those individuals as well.

Note that removing anyone who had "faulty" or missing data is one approach. It's often not the best. Based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep individuals with some missing information).


```{r, cleandata3}
```

Now checking the `Sex` variable. Sex should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.

```{r, cleandata4}
```


Now we see that there is another NA, but it's not `NA` from R, instead it was loaded as character and is now considered as a category.
Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Sex, I'm also using droplevels() to get rid of it.

```{r, cleandata5}
```


# Save data 

All done, data is clean now. Time to save.
Let's assign at the end to some final variable, this makes it easier to add further cleaning steps above.

Finally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. 
This preserves coding like factors, characters, numeric, etc.  If you save as CSV, that information would get lost.
However, CSV is better for sharing with others since it's plain text. If you do CSV, you might want to write down somewhere what each variable is.

See here for some suggestions on how to store your processed data:
http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata

```{r, savedata}
```



